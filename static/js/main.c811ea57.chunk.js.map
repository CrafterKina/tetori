{"version":3,"sources":["NavigableDialog.tsx","ImageLoader.tsx","InformationPane.tsx","Tetori.tsx","PlainTextParser.tsx","SourceSwitcher.tsx","ChangeLog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavigableDialog","props","contents","pos","updatePos","useState","collapse","setCollapse","className","onClick","title","hidden","e","currentTarget","scrollTop","undefined","ImageLoader","local","useRef","url","loadImage","apply","files","current","file","reader","FileReader","addEventListener","result","this","readAsDataURL","text","ref","type","accept","value","length","placeholder","ItemTypes","DraggableBox","Box","note","index","remove","editNote","useDrag","item","x","y","id","drag","timeout","isTextNote","onChange","target","style","width","w","height","h","zIndex","isImageNote","Error","draggable","backgroundSize","backgroundRepeat","backgroundImage","left","top","onResize","size","clearTimeout","setTimeout","doNothing","InformationPane","notes","map","n","i","p","key","NotePalette","createNote","image","Image","src","onload","naturalWidth","naturalHeight","generateUUID","chars","split","len","Math","floor","random","toString","join","InformationPaneEditor","pane","editPane","useCallback","concat","Object","assign","idx","replace","slice","append","splice","removeNote","useDrop","drop","monitor","getDifferenceFromInitialOffset","dx","dy","round","Tetori","panes","pages","dispatchEditMessage","reduce","message","args","partial","page","newPages","snapshot","newPane","edit","setEdit","checked","backgroundPosition","DndProvider","backend","HTML5Backend","values","c","dialog","PlainTextParser","blanks","lines","allowEmpty","allowEmptyLine","state","setState","parseInt","paramsObj","splitPlainText","chunk","s","replaceAll","flatMap","num","RegExp","blanksToSplit","ret","push","linesToSplit","filter","test","SourceSwitcher","source","setSource","onSourceChanged","event","t","Source","JsonTetoriDecoder","JSON","parse","ChangeLog","log","dispatchJumpMessage","to","App","useReducer","action","stepNumber","history","dispatchMessage","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c811ea57.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\n\ntype Props = {\n    contents: string[]\n    pos: number\n    updatePos(message: string, args: { pos: number }): void\n}\n\nexport function NavigableDialog(props: Props) {\n    const {contents, pos, updatePos} = props;\n    const [collapse, setCollapse] = useState(true);\n\n    return (<div className={\"dialog\"}>\n        <button onClick={() => setCollapse(!collapse)}>{`Prev ${collapse ? \"▲\" : \"▼\"}`}</button>\n        <p className={\"previous-dialog\"} title={\"クリックで前へ\"} hidden={collapse}\n           onClick={(e) => {\n               e.currentTarget.scrollTop = 0\n               if (contents[pos - 1] !== undefined) updatePos(`ページ${pos - 1}`, {pos: pos - 1});\n           }}>{contents[pos - 1] ?? \"NA\"}</p>\n        <p className={\"next-dialog\"} title={\"クリックで次へ\"}\n           onClick={(e) => {\n               e.currentTarget.scrollTop = 0\n               if (contents[pos + 1] !== undefined) updatePos(`ページ${pos + 1}`, {pos: pos + 1});\n           }}>{contents[pos] ?? \"NA\"}</p>\n    </div>)\n}","import React, {useRef} from \"react\";\n\nexport function ImageLoader(props: { apply(url: string): void, text: string }) {\n    const local = useRef<HTMLInputElement | null>(null);\n    const url = useRef<HTMLInputElement | null>(null);\n\n    function loadLocalImage() {\n        const files = local.current?.files;\n        if (!files) return;\n        const file = files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n            const result = this.result;\n            if (typeof result === \"string\") {\n                loadImage(result);\n            }\n        })\n        reader.readAsDataURL(file);\n    }\n\n    function loadImage(url: string) {\n        if (!url) return;\n        props.apply(url);\n    }\n\n    return <ul>\n        <li>\n            <label>\n                <button onClick={loadLocalImage}>{props.text}</button>\n                <input ref={local} type={\"file\"} accept={\"image/png,image/jpeg\"}/>\n            </label>\n        </li>\n        <li>\n            <label>\n                <button onClick={() => {\n                    const value = url.current?.value;\n                    if (!value || value.length === 0) return;\n                    loadImage(value)\n                }}>{props.text}</button>\n                <input ref={url} type={\"text\"} placeholder={\"https://...\"}/>\n            </label>\n        </li>\n    </ul>\n}","import ResizeObserver from 'rc-resize-observer';\nimport React, {useCallback, useRef, useState} from \"react\";\nimport {useDrag, useDrop} from \"react-dnd\";\nimport {ImageLoader} from \"./ImageLoader\";\n\ninterface Note {\n    type: typeof ItemTypes[keyof typeof ItemTypes],\n    key: string,\n    y: number,\n    x: number,\n    h?: number,\n    w?: number,\n}\n\ninterface TextNote extends Note {\n    type: \"text\"\n    h: number,\n    w: number,\n    text: string\n}\n\nfunction isTextNote(note: Note): note is TextNote {\n    return note.type === \"text\";\n}\n\ninterface ImageNote extends Note {\n    type: \"image\"\n    url: string\n}\n\nfunction isImageNote(note: Note): note is ImageNote {\n    return note.type === \"image\";\n}\n\ntype NotePacket = {\n    type: typeof ItemTypes[keyof typeof ItemTypes]\n    id: number,\n    y: number, x: number\n}\n\nexport type NoteMap = Array<Note>\n\nconst ItemTypes = {\n    TEXT: \"text\",\n    IMAGE: \"image\"\n} as const\n\nfunction DraggableBox(props: { note: Note, index: number, remove(): void, editNote(p: Partial<Omit<Note, \"key\">>): void }) {\n    const {note, index, remove, editNote} = props;\n    const [, drag] = useDrag<NotePacket, unknown, unknown>({\n        item: {x: note.x, y: note.y, id: index, type: ItemTypes.TEXT}\n    })\n\n    const timeout = useRef<ReturnType<typeof setTimeout>>();\n\n    let Box;\n    if (isTextNote(note)) {\n        Box = () => (<textarea\n            value={note.text}\n            onChange={(e) => editNote({text: e.target.value} as TextNote)}\n            className={\"box\"}\n            style={{\n                width: note.w,\n                height: note.h,\n                zIndex: index\n            }}/>)\n    } else if (isImageNote(note)) {\n        Box = () => (<div className={\"box\"} draggable={false} style={{\n            width: note.w,\n            height: note.h,\n            zIndex: index,\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundImage: `url(${note.url})`\n        }}>\n        </div>)\n    } else throw new Error();\n\n    return (<div className={\"draggable-wrapper\"} style={{\n        left: note.x,\n        top: note.y,\n    }}>\n        <div className={\"note-navigation\"}>\n            <div ref={drag} className={\"drag-handle\"} title={\"ドラッグで動かす\"}/>\n            <button className={\"close-button\"} onClick={remove} title={\"閉じる\"}/>\n        </div>\n        <ResizeObserver onResize={((size) => {\n            if (note.h === size.height && note.w === size.width) return;\n            if (timeout.current) clearTimeout(timeout.current);\n            timeout.current = setTimeout(() => {\n                editNote({h: size.height, w: size.width});\n            }, 1000);\n        })}>\n            <Box/>\n        </ResizeObserver>\n    </div>)\n}\n\nconst doNothing = (() => {\n});\n\nexport function InformationPane(props: { notes: Note[], remove?: (idx: number) => void, editNote?: (idx: number, p: Partial<Omit<Note, \"key\">>) => void }) {\n    const remove = props.remove ?? doNothing\n    const editNote = props.editNote ?? doNothing\n    return (\n        <div className={\"pane\"}>\n            {props.notes.map((n, i) => <DraggableBox index={i} key={n.key} note={n} remove={() => remove(i)}\n                                                     editNote={(p) => editNote(i, p)}/>)}\n        </div>)\n}\n\nfunction NotePalette(props: { createNote(note: Omit<Note, \"key\">): void }) {\n    const [collapse, setCollapse] = useState(false);\n\n    return (<aside className={\"palette\"}>\n        <button onClick={() => setCollapse(!collapse)}>{`${collapse ? \"開く\" : \"最小化\"}`}</button>\n        <h1>パレット</h1>\n        <ul hidden={collapse}>\n            <li onClick={() => props.createNote({\n                type: \"text\",\n                text: \"\",\n                x: 0,\n                y: 0,\n                w: 300,\n                h: 300\n            } as TextNote)}>{\"テキスト\"}</li>\n            <li><ImageLoader text={\"画像\"} apply={(url) => {\n                const image = new Image();\n                image.src = url;\n                image.onload = function () {\n                    let width = image.naturalWidth;\n                    let height = image.naturalHeight;\n                    if (width <= height) {\n                        if (500 < height) {\n                            width = 500 * width / height;\n                            height = 500;\n                        }\n                    } else {\n                        if (500 < width) {\n                            height = 500 * height / width;\n                            width = 500;\n                        }\n                    }\n                    props.createNote({\n                        type: \"image\",\n                        url: url,\n                        x: 0,\n                        y: 0,\n                        h: height,\n                        w: width\n                    } as ImageNote)\n                }\n            }}/></li>\n        </ul>\n    </aside>)\n}\n\nfunction generateUUID(): string {\n    // https://qiita.com/psn/items/d7ac5bdb5b5633bae165\n    // https://github.com/GoogleChrome/chrome-platform-analytics/blob/master/src/internal/identifier.js\n    // const FORMAT: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n    let chars = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\");\n    for (let i = 0, len = chars.length; i < len; i++) {\n        switch (chars[i]) {\n            case 'x':\n                chars[i] = Math.floor(Math.random() * 16).toString(16);\n                break;\n            case 'y':\n                chars[i] = (Math.floor(Math.random() * 4) + 8).toString(16);\n                break;\n        }\n    }\n    return chars.join(\"\");\n}\n\nexport function InformationPaneEditor(props: { editPane(pane: NoteMap): void, pane: NoteMap }) {\n    const {pane, editPane} = props;\n\n    const createNote = useCallback((note: Partial<Note> & Omit<Note, \"key\">) => {\n        editPane(pane.concat([Object.assign({}, note, {key: generateUUID()})]))\n    }, [editPane, pane]);\n\n    const editNote = useCallback((idx: number, p: Partial<Omit<Note, \"key\">>) => {\n        const replace = pane.slice();\n        const append = Object.assign({}, replace.splice(idx, 1)[0], p)\n        editPane(replace.concat([append]))\n    }, [editPane, pane]);\n\n    const removeNote = useCallback((idx: number) => {\n        const replace = pane.slice();\n        replace.splice(idx, 1);\n        editPane(replace);\n    }, [editPane, pane])\n\n    const [, drop] = useDrop({\n        accept: [ItemTypes.TEXT],\n        drop(item: NotePacket, monitor) {\n            const {id, x, y} = item;\n            const {x: dx, y: dy} = monitor.getDifferenceFromInitialOffset() || {x: 0, y: 0};\n            const left = Math.round(x + dx);\n            const top = Math.round(y + dy);\n            editNote(id, {x: left, y: top});\n            return undefined;\n        }\n    })\n\n    return (<div className={\"pane-editor\"} ref={drop}>\n        <InformationPane notes={pane} remove={removeNote} editNote={editNote}/>\n        <NotePalette createNote={createNote}/>\n    </div>)\n}","import React, {Dispatch, useCallback, useState} from \"react\";\nimport {NavigableDialog} from \"./NavigableDialog\";\nimport {InformationPane, InformationPaneEditor, NoteMap} from \"./InformationPane\";\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport \"./tetori.css\"\nimport {EditMessage} from \"./App\";\nimport {ImageLoader} from \"./ImageLoader\";\n\nexport interface Page {\n    pane?: number\n    dialog: string\n    backgroundImage?: string\n}\n\nexport type Pages = Array<Page>\nexport type Panes = Array<NoteMap>\nexport type Snapshot = { pos: number, pages: Pages, panes: Panes }\n\nexport const EmptySnapshot = (): Snapshot => ({pos: 0, pages: [], panes: [[]]})\n\ntype Props = {\n    dispatchEditMessage: Dispatch<EditMessage>\n} & Snapshot\n\nexport function Tetori(props: Props) {\n    const {panes, pages, dispatchEditMessage, pos} = props;\n\n    const reduce = useCallback((message: string, args: { page?: Partial<Page>, pane?: NoteMap, pos?: number }) => {\n        const {pos: p, pane, page: partial} = args;\n        const page = Object.assign({}, pages[pos], partial);\n        const newPages = pages.slice();\n        newPages[pos] = page;\n        dispatchEditMessage({\n            type: \"edit\",\n            message,\n            snapshot: {pages: newPages, panes: pane ? panes.concat([pane]) : panes, pos: p ?? pos}\n        });\n    }, [dispatchEditMessage, pages, panes, pos]);\n\n    const editPane = useCallback(\n        // 編集履歴のような機構をEditorが知る必要はない (このメソッドはpanes.lengthに依存)\n        (newPane: NoteMap) => reduce(\"Paneの編集\", {page: {pane: panes.length}, pane: newPane}),\n        [panes.length, reduce]\n    );\n\n    const [edit, setEdit] = useState(true);\n\n    return (<div>\n        <label><input type={\"checkbox\"} checked={edit} onChange={e => setEdit(e.target.checked)}/>編集モード</label>\n        <ImageLoader apply={(url) => {\n            reduce(\"背景画像を設定\", {page: {backgroundImage: url}})\n        }} text={\"背景画像\"}/>\n        <div className={`tetori ${edit ? \"edit\" : \"\"}`} style={pages[pos]?.backgroundImage ? {\n            backgroundImage: `url(${pages[pos]?.backgroundImage})`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"contain\"\n        } : {}}>\n            <DndProvider backend={HTML5Backend}>\n                {edit\n                    ? <InformationPaneEditor pane={panes[pages[pos]?.pane ?? panes.length - 1]} editPane={editPane}/>\n                    : <InformationPane notes={Object.values(panes[pages[pos]?.pane ?? panes.length - 1])}/>}\n            </DndProvider>\n            <NavigableDialog contents={pages.map(c => c.dialog)} pos={pos}\n                             updatePos={reduce}/>\n        </div>\n    </div>)\n}","import {EmptySnapshot, Pages} from \"./Tetori\";\nimport React, {Dispatch, useState} from \"react\";\nimport {EditMessage} from \"./App\";\n\ntype PlainTextParsing = { text: string, blanks: number, lines: number, allowEmpty: boolean, allowEmptyLine: boolean };\n\nexport function PlainTextParser(props: { dispatchEditMessage: Dispatch<EditMessage> }) {\n    const {dispatchEditMessage} = props\n    const [state, setState] = useState<PlainTextParsing>({\n        text: \"\",\n        blanks: 1,\n        lines: 0,\n        allowEmpty: false,\n        allowEmptyLine: false\n    });\n\n\n    return (\n        <div>\n            <div>\n                <label>\n                    <input type={\"number\"}\n                           value={(state.blanks || 0).toString()}\n                           onChange={(e) => {\n                               setState(Object.assign({}, state, {blanks: parseInt(e.target.value)}));\n                           }}/>\n                    {\"連続空行で段落とみなす\"}\n                </label>\n                <label>\n                    <input type={\"number\"}\n                           value={(state.lines || 0).toString()}\n                           onChange={(e) => {\n                               setState(Object.assign({}, state, {lines: parseInt(e.target.value)}));\n                           }}/>\n                    {\"複数行を段落とみなす\"}\n                </label>\n                <label>\n                    <input type={\"checkbox\"}\n                           checked={state.allowEmpty}\n                           onChange={(e) => {\n                               setState(Object.assign({}, state, {allowEmpty: e.target.checked}));\n                           }}/>\n                    {\"空の要素を許容する\"}\n                </label>\n                <label>\n                    <input type={\"checkbox\"}\n                           checked={state.allowEmptyLine}\n                           onChange={(e) => {\n                               setState(Object.assign({}, state, {allowEmptyLine: e.target.checked}));\n                           }}/>\n                    {\"空行を許容する\"}\n                </label>\n            </div>\n            <textarea value={state.text}\n                      onChange={(e) => {\n                          setState(Object.assign({}, state, {text: e.target.value}));\n                      }}/>\n            <button onClick={() => dispatchEditMessage({\n                type: \"edit\",\n                snapshot: Object.assign(EmptySnapshot(), {pages: parsePlainText(state)}),\n                message: `プレーンテキストから読み込み 空行数: ${state.blanks}, 行数: ${state.lines}, 空要素許容: ${state.allowEmpty}, 空行許容: ${state.allowEmptyLine}, テキスト: ${state.text.slice(0, 20)}`\n            })}>{\"読み込み\"}</button>\n        </div>\n    )\n}\n\nexport function splitPlainText(paramsObj: PlainTextParsing): string[] {\n    const {text, blanks, lines, allowEmpty, allowEmptyLine} = paramsObj;\n\n    function blanksToSplit(text: string, num: number): string[] {\n        return text.split(RegExp(\"\\n{\" + (num + 1) + \",}\"));\n    }\n\n    function linesToSplit(text: string, num: number): string[] {\n        const ret = [];\n        const lines = text.split(\"\\n\");\n        for (let i = 0; i < lines.length; i += num) {\n            ret.push(lines.slice(i, i + num).join(\"\\n\"));\n        }\n        return ret;\n    }\n\n    let chunk = [text];\n    // 空白しかない行を空行とみなすために前処理。\\sだと\\nが含まれてしまうため個別に指定している\n    chunk = chunk.map(s => s.replaceAll(/^[\\f\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+$/gm, \"\"));\n    if (blanks > 0) chunk = chunk.flatMap(s => blanksToSplit(s, blanks));\n    if (!allowEmptyLine) chunk = chunk.map(s => s.replaceAll(/^\\n/gm, \"\").replaceAll(/\\n$/g, \"\"));\n    if (lines > 0) chunk = chunk.flatMap(s => linesToSplit(s, lines));\n    if (!allowEmpty) chunk = chunk.filter(e => e.length !== 0 && !/^\\s*$/.test(e));\n    return chunk;\n}\n\nfunction parsePlainText(paramsObj: PlainTextParsing): Pages {\n    return splitPlainText(paramsObj).map(e => ({dialog: e}));\n}","import React, {ChangeEvent, Dispatch, useState} from \"react\";\nimport {PlainTextParser} from \"./PlainTextParser\";\nimport {EditMessage} from \"./App\";\n\nexport function SourceSwitcher(props: { dispatchEditMessage: Dispatch<EditMessage> }) {\n    const {dispatchEditMessage} = props;\n    const [source, setSource] = useState<SourceType>(\"plain_text\");\n\n    function onSourceChanged(event: ChangeEvent<HTMLInputElement>) {\n        if (!isSourceType(event.target.value)) return;\n        if (!event.target.checked) return;\n        setSource(event.target.value);\n    }\n\n    return (<div>\n        <div hidden={true}>\n            <label>\n                <input type={\"radio\"} checked={source === \"plain_text\"} onChange={onSourceChanged}\n                       value={\"plain_text\"}/> {\"PlainText\"}\n            </label>\n            <label>\n                <input type={\"radio\"} checked={source === \"json\"} onChange={onSourceChanged} value={\"json\"}/> {\"JSON\"}\n            </label>\n        </div>\n        <Source type={source} dispatchEditMessage={dispatchEditMessage}/>\n    </div>)\n}\n\ntype SourceType = \"plain_text\" | \"json\"\n\nfunction isSourceType(t: string): t is SourceType {\n    return t === \"plain_text\" || t === \"json\";\n\n}\n\ntype SourceProps = {\n    type: SourceType,\n    dispatchEditMessage: Dispatch<EditMessage>\n}\n\nfunction Source(props: SourceProps) {\n    switch (props.type) {\n        case \"plain_text\":\n            return (<PlainTextParser dispatchEditMessage={props.dispatchEditMessage}/>)\n        case \"json\":\n            return (<JsonTetoriDecoder dispatchEditMessage={props.dispatchEditMessage}/>)\n        default:\n            throw new Error();\n    }\n}\n\nfunction JsonTetoriDecoder(props: { dispatchEditMessage: Dispatch<EditMessage> }) {\n    return (<textarea onChange={(event) => {\n        try {\n            props.dispatchEditMessage({type: \"edit\", snapshot: JSON.parse(event.target.value), message: \"JSONからのロード\"})\n        } catch (e: unknown) {\n            // todo error handling\n        }\n    }}/>)\n}\n\n","import React, {Dispatch} from \"react\";\nimport {JumpMessage} from \"./App\";\n\nexport function ChangeLog(props: { dispatchJumpMessage: Dispatch<JumpMessage>, log: string[] }) {\n    return (<aside>\n        <h1>編集履歴</h1>\n        <ol className={\"changelog\"}>\n            {props.log.map((e, i) => <li key={i} onClick={() => {\n                props.dispatchJumpMessage({type: \"jump\", to: i})\n            }}>{e}</li>)}\n        </ol>\n    </aside>)\n}","import \"./app.css\"\n\nimport React, {Reducer, useReducer} from 'react';\nimport {EmptySnapshot, Snapshot, Tetori} from \"./Tetori\";\nimport {SourceSwitcher} from \"./SourceSwitcher\";\nimport {ChangeLog} from \"./ChangeLog\";\n\ntype Step = { message: string, snapshot: Snapshot };\ntype History = { stepNumber: number, history: Array<Step> }\n\nexport type EditMessage = { type: \"edit\", snapshot: Snapshot, message: string };\nexport type JumpMessage = { type: \"jump\", to: number }\n\nfunction App() {\n    const [state, dispatchMessage] = useReducer<Reducer<History, EditMessage | JumpMessage>>((state, action) => {\n        switch (action.type) {\n            case \"edit\": {\n                const {message, snapshot} = action;\n                return {stepNumber: state.history.length, history: state.history.concat({message, snapshot})};\n            }\n            case \"jump\": {\n                return Object.assign({}, state, {stepNumber: action.to});\n            }\n        }\n    }, {stepNumber: 0, history: [{message: \"新規\", snapshot: EmptySnapshot()}]});\n\n    return (\n        <div className=\"App\">\n            <SourceSwitcher dispatchEditMessage={dispatchMessage}/>\n            <Tetori dispatchEditMessage={dispatchMessage}  {...state.history[state.stepNumber].snapshot} />\n            <ChangeLog dispatchJumpMessage={dispatchMessage} log={state.history.map(e => e.message)}/>\n        </div>\n    );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./reset.css\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}